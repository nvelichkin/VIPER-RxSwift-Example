//
//  PostsListPresenter.swift
//  Viper-RxSwift-Example
//
//  Created by Nikita Velichkin on 19/01/2020.
//  Copyright (c) 2020 Nikita Velichkin. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import RxCocoa
import RxDataSources

final class PostsListPresenter {

    // MARK: - Private properties -

    private unowned let view: PostsListViewInterface
    private let interactor: PostsListInteractorInterface
    private let wireframe: PostsListWireframeInterface
    private let posts = BehaviorRelay<[Post]>(value: [])
    
    // MARK: - Lifecycle -

    init(view: PostsListViewInterface, interactor: PostsListInteractorInterface, wireframe: PostsListWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        
        interactor.fetch().bind(to: posts).disposed(by: view.disposeBag)
    }
}

// MARK: - Extensions -

extension PostsListPresenter: PostsListPresenterInterface {

    func configure(with output: PostsList.ViewOutput) -> PostsList.ViewInput {
        output.didSelectPost.subscribe(onNext: { [weak self] post in
            self?.wireframe.didSelectPost(post)
        })
            .disposed(by: view.disposeBag)
        
        return PostsList.ViewInput(posts: dataSource)
    }

    var dataSource: Driver<[AnimatableSectionModel<String, Post>]> {
        return posts.asDriver(onErrorJustReturn: []).map { [AnimatableSectionModel(model: "", items: $0)] }
    }
}
